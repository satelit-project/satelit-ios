//
// DO NOT EDIT.
//
// Generated by the protocol buffer compiler.
// Source: rpc/v1/ongoings.proto
//

//
// Copyright 2018, gRPC Authors All rights reserved.
//
// Licensed under the Apache License, Version 2.0 (the "License");
// you may not use this file except in compliance with the License.
// You may obtain a copy of the License at
//
//     http://www.apache.org/licenses/LICENSE-2.0
//
// Unless required by applicable law or agreed to in writing, software
// distributed under the License is distributed on an "AS IS" BASIS,
// WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
// See the License for the specific language governing permissions and
// limitations under the License.
//
import Foundation
import GRPC
import NIO
import NIOHTTP1
import SwiftProtobuf


/// Usage: instantiate Rpc_V1_AnimeOngoingsServiceClient, then call methods of this protocol to make API calls.
public protocol Rpc_V1_AnimeOngoingsServiceClientProtocol {
  func ongoings(_ request: Rpc_V1_OngoingsRequest, callOptions: CallOptions?) -> UnaryCall<Rpc_V1_OngoingsRequest, Rpc_V1_OngoingsResponse>
}

public final class Rpc_V1_AnimeOngoingsServiceClient: GRPCClient, Rpc_V1_AnimeOngoingsServiceClientProtocol {
  public let channel: GRPCChannel
  public var defaultCallOptions: CallOptions

  /// Creates a client for the rpc.v1.AnimeOngoingsService service.
  ///
  /// - Parameters:
  ///   - channel: `GRPCChannel` to the service host.
  ///   - defaultCallOptions: Options to use for each service call if the user doesn't provide them.
  public init(channel: GRPCChannel, defaultCallOptions: CallOptions = CallOptions()) {
    self.channel = channel
    self.defaultCallOptions = defaultCallOptions
  }

  /// Returns list of currently airing anime shows.
  ///
  /// The list is sorted by how much time left until next episode.
  ///
  /// - Parameters:
  ///   - request: Request to send to Ongoings.
  ///   - callOptions: Call options; `self.defaultCallOptions` is used if `nil`.
  /// - Returns: A `UnaryCall` with futures for the metadata, status and response.
  public func ongoings(_ request: Rpc_V1_OngoingsRequest, callOptions: CallOptions? = nil) -> UnaryCall<Rpc_V1_OngoingsRequest, Rpc_V1_OngoingsResponse> {
    return self.makeUnaryCall(path: "/rpc.v1.AnimeOngoingsService/Ongoings",
                              request: request,
                              callOptions: callOptions ?? self.defaultCallOptions)
  }

}


// Provides conformance to `GRPCPayload` for request and response messages
extension Rpc_V1_OngoingsRequest: GRPCProtobufPayload {}
extension Rpc_V1_OngoingsResponse: GRPCProtobufPayload {}

