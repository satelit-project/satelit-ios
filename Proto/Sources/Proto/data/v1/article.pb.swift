// DO NOT EDIT.
//
// Generated by the Swift generator plugin for the protocol buffer compiler.
// Source: data/v1/article.proto
//
// For information on using the generated types, please see the documentation:
//   https://github.com/apple/swift-protobuf/

import Foundation
import SwiftProtobuf

// If the compiler emits an error on this type, it is because this file
// was generated by a version of the `protoc` Swift plug-in that is
// incompatible with the version of SwiftProtobuf to which you are linking.
// Please ensure that you are building against the same version of the API
// that was used to generate this file.
fileprivate struct _GeneratedWithProtocGenSwiftVersion: SwiftProtobuf.ProtobufAPIVersionCheck {
  struct _2: SwiftProtobuf.ProtobufAPIVersion_2 {}
  typealias Version = _2
}

/// Represents a news article.
public struct Data_V1_Article {
  // SwiftProtobuf.Message conformance is added in an extension below. See the
  // `Message` and `Message+*Additions` files in the SwiftProtobuf library for
  // methods supported on all messages.

  /// Name of the article's source.
  public var source: String = String()

  /// Unix timestamp when the article was posted.
  public var timestamp: Double = 0

  /// Number of likes.
  public var likes: Int64 = 0

  /// Title of the article.
  public var title: String = String()

  /// A short summary of the article.
  public var summary: String = String()

  /// URL to the source article.
  public var sourceURL: String = String()

  public var unknownFields = SwiftProtobuf.UnknownStorage()

  public init() {}
}

// MARK: - Code below here is support for the SwiftProtobuf runtime.

fileprivate let _protobuf_package = "data.v1"

extension Data_V1_Article: SwiftProtobuf.Message, SwiftProtobuf._MessageImplementationBase, SwiftProtobuf._ProtoNameProviding {
  public static let protoMessageName: String = _protobuf_package + ".Article"
  public static let _protobuf_nameMap: SwiftProtobuf._NameMap = [
    1: .same(proto: "source"),
    2: .same(proto: "timestamp"),
    3: .same(proto: "likes"),
    4: .same(proto: "title"),
    5: .same(proto: "summary"),
    6: .standard(proto: "source_url"),
  ]

  public mutating func decodeMessage<D: SwiftProtobuf.Decoder>(decoder: inout D) throws {
    while let fieldNumber = try decoder.nextFieldNumber() {
      switch fieldNumber {
      case 1: try decoder.decodeSingularStringField(value: &self.source)
      case 2: try decoder.decodeSingularDoubleField(value: &self.timestamp)
      case 3: try decoder.decodeSingularSInt64Field(value: &self.likes)
      case 4: try decoder.decodeSingularStringField(value: &self.title)
      case 5: try decoder.decodeSingularStringField(value: &self.summary)
      case 6: try decoder.decodeSingularStringField(value: &self.sourceURL)
      default: break
      }
    }
  }

  public func traverse<V: SwiftProtobuf.Visitor>(visitor: inout V) throws {
    if !self.source.isEmpty {
      try visitor.visitSingularStringField(value: self.source, fieldNumber: 1)
    }
    if self.timestamp != 0 {
      try visitor.visitSingularDoubleField(value: self.timestamp, fieldNumber: 2)
    }
    if self.likes != 0 {
      try visitor.visitSingularSInt64Field(value: self.likes, fieldNumber: 3)
    }
    if !self.title.isEmpty {
      try visitor.visitSingularStringField(value: self.title, fieldNumber: 4)
    }
    if !self.summary.isEmpty {
      try visitor.visitSingularStringField(value: self.summary, fieldNumber: 5)
    }
    if !self.sourceURL.isEmpty {
      try visitor.visitSingularStringField(value: self.sourceURL, fieldNumber: 6)
    }
    try unknownFields.traverse(visitor: &visitor)
  }

  public static func ==(lhs: Data_V1_Article, rhs: Data_V1_Article) -> Bool {
    if lhs.source != rhs.source {return false}
    if lhs.timestamp != rhs.timestamp {return false}
    if lhs.likes != rhs.likes {return false}
    if lhs.title != rhs.title {return false}
    if lhs.summary != rhs.summary {return false}
    if lhs.sourceURL != rhs.sourceURL {return false}
    if lhs.unknownFields != rhs.unknownFields {return false}
    return true
  }
}
